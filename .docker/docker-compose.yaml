version: "3.2"

# define services
services:
  # define redis service
  # open port on 6379
  redis:
    restart: always
    image: redis:5
    ports:
      - "6379:6379"
    networks:
      - db-net

  # define maria DB service
  # set environment variables
  db:
    restart: always
    image: mariadb:5.5
    environment:
      - MYSQL_HOST=localhost
      - MYSQL_PORT=3306
      - MYSQL_ROOT_HOST=%
      - MYSQL_DATABASE=hrdl
      - MYSQL_USER=root
      - MYSQL_PASSWORD=password
      - MYSQL_ROOT_PASSWORD=password
    ports:
      - "3302:3306"
    networks:
      - db-net

  # define worker service (working on tasks)
  # uses maria DB and redis
  worker:
    restart: always
    container_name: worker
    command : bash -c "celery -A HRDLbackend worker --loglevel=info"
    build:
      context: ../deployment/hrdlbackend/
      dockerfile: Dockerfile
    environment:
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - db-net

  # define timing service (celery beat)
  # uses maria DB and redis
  beat:
    restart: always
    container_name: beat
    command : bash -c "celery -A HRDLbackend beat --loglevel=debug --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    build:
      context: ../deployment/hrdlbackend/
      dockerfile: Dockerfile
    environment:
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - db-net

  # defines main backend service (django)
  # checks database and starts service if database is available
  # does server init (setup cache, etc)
  # open port on 8000
  backend:
    restart: always
    container_name: backend
    command : bash -c "python check_db.py --service-name db --ip db --port 3306 && 
                      python manage.py migrate &&
                      python manage.py loaddata initialdata.yaml &&
                      python manage.py createcachetable &&
                      python manage.py runserver 0.0.0.0:8000"
    build:
      context: ../deployment/hrdlbackend/
      dockerfile: Dockerfile
    volumes:
      - hrdlbackend:/app/api
    ports:
      - "8000:8000"
    stdin_open: true
    tty: true
    depends_on:
      - db
      - redis
    networks:
      - db-net

  # defines frontend service (react)
  # depends on backend service
  # redirects port 3000 to port 80
  frontend:
    restart: always
    command : npm start
    container_name: frontend
    build:
      context: ../deployment/hrdlfrontend/
      dockerfile: Dockerfile
    volumes:
      - hrdlfrontend:/app/frontend
    ports:
      - "80:3000"
    stdin_open: true
    depends_on:
      - backend
    networks:
      - db-net

# defines network for services to communicate with db
networks:
  db-net:
    driver: bridge

# defines volumes for services
volumes:
    hrdlbackend:
        external: false
    hrdlfrontend:
        external: false